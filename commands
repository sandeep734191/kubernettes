-----> kubectl get nodes
-----> kubectl get pod
-----> kubectl get services

note: cannot interact with pod directly so a abstraction is present over it which is deployment

-----> kubectl create deployment <name> --image=<imageName>

ex:kubectl create deloyment nginx-deployment --image=nginx

----> kubectl get deployment -> will show above created nginx-deloyment
----> kubectl get pod -> now shows nginx-deployment container

Between deployment and pod there is replica set which manages the replicas of pod

----> kubectl get replicaset -> ex:nginx-deployment-<id of replicaset>-<id of pod>

Layers of abstraction:

DEPLOYMENT manages a REPLICASET manages a POD is an abstraction of CONTAINER

Everything below deployment is automatically managed by kubernettes

-----> kubectl edit deployment <name of deploment>

------> kubectl logs <name of pod>

------> kubectl describe pod <pod name> ->gives some additional information

------> kubectl exec -it <pod name> --bin/bash -> which gives terminal of that pod container and through which we can get additional info

------>kubectl delete deloyment <name of deployment> --deleted deployment and its...

We can create so much additional information while creating deployment in the form of options i.e 
 kubectl create deloyment <name> --image=<image name> option1 option2 .....
 
 Instead of this we can use configuration files in practical
 
 ---> kubectl apply -f config-file.yaml
 
 with kubectl apply we can create and update deployment as well.



